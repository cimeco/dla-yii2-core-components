<?php
/**
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2014 Quoma
 * @license http://www.yiiframework.com/license/
 */

namespace quoma\core\grid;

use yii\base\Model;
use yii\data\ActiveDataProvider;
use yii\db\ActiveQueryInterface;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Inflector;

/**
 *
 * @author Martin Moyano <martingmoyano@gmail.com>
 */
class InputColumn extends \yii\grid\Column
{
    /**
     * @var string the attribute name associated with this column. When neither [[content]] nor [[value]]
     * is specified, the value of the specified attribute will be retrieved from each data model and displayed.
     *
     * Also, if [[label]] is not specified, the label associated with the attribute will be displayed.
     */
    public $attribute;
    /**
     * @var string label to be displayed in the [[header|header cell]] and also to be used as the sorting
     * link label when sorting is enabled for this column.
     * If it is not set and the models provided by the GridViews data provider are instances
     * of [[\yii\db\ActiveRecord]], the label will be determined using [[\yii\db\ActiveRecord::getAttributeLabel()]].
     * Otherwise [[\yii\helpers\Inflector::camel2words()]] will be used to get a label.
     */
    public $label;
    /**
     * @var string|\Closure an anonymous function that returns the value to be displayed for every data model.
     * The signature of this function is `function ($model, $index, $widget)`.
     * If this is not set, `$model[$attribute]` will be used to obtain the value.
     *
     * You may also set this property to a string representing the attribute name to be displayed in this column.
     * This can be used when the attribute to be displayed is different from the [[attribute]] that is used for
     * sorting and filtering.
     */
    public $value;
    /**
     * @var string|array in which format should the value of each data model be displayed as (e.g. "raw", "text", "html",
     * ['date', 'Y-m-d']). Supported formats are determined by the [[GridView::formatter|formatter]] used by
     * the [[GridView]]. Default format is "text" which will format the value as an HTML-encoded plain text when
     * [[\yii\i18n\Formatter::format()]] is used.
     */
    public $format = 'text';
    
    /**
     * Input type
     * @var string 
     */
    public $input = 'textInput';
    /**
     * @var boolean whether to allow sorting by this column. If true and [[attribute]] is found in
     * the sort definition of [[GridView::dataProvider]], then the header cell of this column
     * will contain a link that may trigger the sorting when being clicked.
     */
    public $enableSorting = true;
    /**
     * @var array the HTML attributes for the link tag in the header cell
     * generated by [[\yii\data\Sort::link]] when sorting is enabled for this column.
     * @see \yii\helpers\Html::renderTagAttributes() for details on how attributes are being rendered.
     */
    public $sortLinkOptions = [];
    /**
     * @var string|array|boolean the HTML code representing a filter input (e.g. a text field, a dropdown list)
     * that is used for this data column. This property is effective only when [[GridView::filterModel]] is set.
     *
     * - If this property is not set, a text field will be generated as the filter input;
     * - If this property is an array, a dropdown list will be generated that uses this property value as
     *   the list options.
     * - If you don't want a filter for this data column, set this value to be false.
     */
    public $filter;
    /**
     * @var array the HTML attributes for the filter input fields. This property is used in combination with
     * the [[filter]] property. When [[filter]] is not set or is an array, this property will be used to
     * render the HTML attributes for the generated filter input fields.
     * @see \yii\helpers\Html::renderTagAttributes() for details on how attributes are being rendered.
     */
    public $filterInputOptions = ['class' => 'form-control', 'id' => null];

    public $action;
    
    public $method = 'post';
    
    public $onUpdate;
    
    public $onError;
    
    public $onFocus;
    
    public $always;
    
    /**
     * Template del input
     * @var type 
     */
    public $template = "{input}";
    
    /**
     * @var array the HTML attributes for the input fields. 
     * @see \yii\helpers\Html::renderTagAttributes() for details on how attributes are being rendered.
     */
    public $inputOptions = ['class' => 'form-control input-column input-sm', 'id' => null];

    /**
     * <div class="input-group"> <-- groupOptions
     *  <span class="input-group-addon">
     *      $prefix
     *  </span>
     *  
     *  <input ... />
     * 
     *  <span class="input-group-addon">
     *      $suffix
     *  </span>
     * </div>
     */
    public $prefix;
    public $prefixClass  = 'input-group-addon';
    public $suffix;
    public $suffixClass = 'input-group-addon';
    public $groupOptions = ['class' => 'input-group input-group-sm'];
    
    /**
     * Bool o callable
     * @var mixed 
     */
    public $disabled = false;
    
    /**
     * @inheritdoc
     */
    protected function renderHeaderCellContent()
    {
        $id = $this->grid->options['id'];
        
        $url = \yii\helpers\Url::toRoute($this->action);
        
        $onUpdate = empty($this->onUpdate) ? '' : '('.$this->onUpdate.')(this);';
        $onError = empty($this->onError) ? '' : '('.$this->onError.')(this);';
        $always = empty($this->always) ? '' : '('.$this->always.')();';
        $onFocus = empty($this->onFocus) ? '' : '('.$this->onFocus.')(this);';
        
        $js = 'jQuery(function(){'
            . '$("[data-input-column=\''.$this->attribute.'\']")'
            . '.on("keypress",function(e){ '
                . 'if(e.which == 13 ) { '
                    . 'var data = $(this).serialize();'
                    . 'data += "&model_id=" + $(this).attr("data-model-id");'
                    . '$.ajax({dataType: "json", type: "'.$this->method.'", url: "'.$url.'", data: data})'
                    . '.done(function(m){if(m.status == "success"){'
                            . $onUpdate
                    . '}else if(m.status == "error"){'
                            . $onError
                    . '}})'
                    . '.error(function(e,t,h){'
                            . $onError
                    . '}) '
                    . '.always(function(){'
                            . $always
                    . '}); '
                . '} '
            . '}).on("focus", function(e){'
                . $onFocus
            . '}); });';
        
        $this->grid->getView()->registerJs($js);
        
        if ($this->header !== null || $this->label === null && $this->attribute === null) {
            return parent::renderHeaderCellContent();
        }

        $provider = $this->grid->dataProvider;

        if ($this->label === null) {
            if ($provider instanceof ActiveDataProvider && $provider->query instanceof ActiveQueryInterface) {
                /** @var Model $model */
                $model = new $provider->query->modelClass;
                $label = $model->getAttributeLabel($this->attribute);
            } else {
                $models = $provider->getModels();
                if (($model = reset($models)) instanceof Model) {
                    /** @var Model $model */
                    $label = $model->getAttributeLabel($this->attribute);
                } else {
                    $label = Inflector::camel2words($this->attribute);
                }
            }
        } else {
            $label = $this->label;
        }

        if ($this->attribute !== null && $this->enableSorting &&
            ($sort = $provider->getSort()) !== false && $sort->hasAttribute($this->attribute)) {
            return $sort->link($this->attribute, array_merge($this->sortLinkOptions, ['label' => Html::encode($label)]));
        } else {
            return Html::encode($label);
        }
    }

    /**
     * @inheritdoc
     */
    protected function renderFilterCellContent()
    {
        if (is_string($this->filter)) {
            return $this->filter;
        } elseif ($this->filter !== false && $this->grid->filterModel instanceof Model &&
                  $this->attribute !== null && $this->grid->filterModel->isAttributeActive($this->attribute))
        {
            if (is_array($this->filter)) {
                $options = array_merge(['prompt' => ''], $this->filterInputOptions);
                return Html::activeDropDownList($this->grid->filterModel, $this->attribute, $this->filter, $options);
            } else {
                return Html::activeTextInput($this->grid->filterModel, $this->attribute, $this->filterInputOptions);
            }
        } else {
            return parent::renderFilterCellContent();
        }
    }

    /**
     * @inheritdoc
     */
    public function getDataCellValue($model, $key, $index)
    {
        if ($this->value !== null) {
            if (is_string($this->value)) {
                return ArrayHelper::getValue($model, $this->value);
            } else {
                return call_user_func($this->value, $model, $index, $this);
            }
        } elseif ($this->attribute !== null) {
            //Null:
            if($model->{$this->attribute} == null) 
                return null;
            //Formatted value:
            $formatter = new \yii\i18n\Formatter;
            return $formatter->format($model->{$this->attribute}, $this->format);
        }
        return null;
    }

    /**
     * @inheritdoc
     */
    protected function renderDataCellContent($model, $key, $index)
    {
        if ($this->content === null) {
            
            $input = $this->input;
            
            $class = new \ReflectionClass($model);
            $class = $class->getShortName();
            
            $inputOptions = $this->inputOptions;
            
            $inputOptions['data-input-column'] = $this->attribute;
            $inputOptions['data-model-id'] = $key;
            $inputOptions['tabindex'] = $index+1;
            
            $disabled = false;
            if(is_callable($this->disabled)){
                $disabled = call_user_func($this->disabled, $model, $index, $this);
            }
            
            if($disabled == true){
                $inputOptions['disabled'] = 'disabled';
            }
            
            //return Html::activeInput($input, $model, $this->attribute, $this->filterInputOptions);
            $input =  Html::input($input, $class."[$this->attribute]", $this->getDataCellValue($model, $key, $index), $inputOptions);
            

            if($this->suffix || $this->prefix){
                
                $suffix = $this->suffix;
                $prefix = $this->prefix;
                
                if(is_callable($this->suffix)){
                    $suffix = call_user_func($this->suffix, $model, $index, $this);
                }
                

                if($suffix){
                    $input .= Html::tag('span', $suffix, ['class' => $this->suffixClass]);
                }
                
                if(is_callable($this->prefix)){
                    $prefix = call_user_func($this->prefix, $model, $index, $this);
                }
                
                if($prefix){
                    $input = Html::tag('span', $prefix, ['class' => $this->suffixClass]) . $input;
                }
                
                /**
                 * Si prefix y suffix son callables, necesitamos ver nuevamente 
                 * si tienen contenido para no agregar input-group innecesariamente.
                 * El primer if es necesario para mejorar rendimiento.
                 */
                if($suffix || $prefix){
                    $input = Html::tag('div', $input, $this->groupOptions);
                }
            }
            
            return str_replace('{input}', $input, $this->template);
            
        } else {
            return parent::renderDataCellContent($model, $key, $index);
        }
    }
}
